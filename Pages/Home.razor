@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.Linq

<PageTitle>MC AFK Tracker</PageTitle>

<style>
    .custom-farm-option {
        background-color: #4CAF50 !important;
        color: white !important;
    }
    
    .custom-farm-option:hover {
        background-color: #45a049 !important;
    }
</style>

<nav class="navbar">
    <ul class="navbar-nav">
        <li><a href="/" @onclick="PlayButtonSound">Home</a></li>
        <li><a href="/clicker" @onclick="PlayButtonSound">Clicker</a></li>
        <li><a href="/help" @onclick="PlayButtonSound">Help</a></li>
    </ul>
</nav>

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="hero-section">
                <h1 class="hero-title">MC AFK Tracker</h1>
                <p class="hero-subtitle">Plan your AFK farming sessions with precision</p>
            </div>
        </div>
    </div>

    <div class="row" style="margin-bottom: 2rem;">
        <div class="col-12">
            <div class="grid" style="gap: 2rem;">
                <div class="col-6">
                    <div class="card" style="margin-bottom: 2rem;">
                        <div class="card-header">
                            <h2><img src="exppo.webp" alt="Farm" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 12px;" /> Farm Configuration</h2>
                        </div>
                        <div class="card-body">
                            <div class="form-group">
                                <label class="form-label">Farm Type</label>
                                <div style="display: flex; gap: 0.5rem; align-items: center;">
                                    @if (isCreatingCustomFarm)
                                    {
                                        <input type="text" @bind="customFarmName" placeholder="Enter custom farm name (e.g., My Iron Farm)" class="form-input" style="flex: 1;" />
                                    }
                                    else
                                    {
                                        <select value="@selectedFarm" @onfocus="PlayButtonSound" @onchange="OnFarmSelectionChange" class="form-input" style="flex: 1;">
                                            <option value="">Select your farm type...</option>
                                            <option value="Custom">üîß Custom Farm</option>
                                            @foreach (var customFarm in farmTypes.Where(f => f.Value.Color == "custom").OrderBy(f => f.Key))
                                            {
                                                <option value="@customFarm.Key" class="custom-farm-option">@customFarm.Key (@customFarm.Value.Rate items/@customFarm.Value.TimeFrameMinutes min)</option>
                                            }
                                            @foreach (var farm in defaultFarms)
                                            {
                                                <option value="@farm.Name">@farm.Icon @farm.Name (@farm.Rate items/5min)</option>
                                            }
                                        </select>
                                    }
                                    @if (isCreatingCustomFarm)
                                    {
                                        <button @onclick="CancelCustomFarmWithSound" class="button button-tertiary" style="padding: 0.5rem 0.75rem; min-width: auto;" title="Cancel Custom Farm">
                                            Cancel
                                        </button>
                                    }
                                    else
                                    {
                                        <button @onclick="AddCustomFarmWithSound" class="button button-secondary" style="padding: 0.5rem 0.75rem; min-width: auto; font-size: 1.2rem;" title="Add Custom Farm">
                                            Custom
                                        </button>
                                    }
                                    @if (!isCreatingCustomFarm && !string.IsNullOrEmpty(selectedFarm) && farmTypes.ContainsKey(selectedFarm) && farmTypes[selectedFarm].Color == "custom")
                                    {
                                        <button @onclick="DeleteCustomFarmWithSound" class="button button-danger" style="padding: 0.5rem 0.75rem; min-width: auto; color: #FF6B6B; background: rgba(255, 107, 107, 0.1); border: 1px solid #FF6B6B;" title="Delete Custom Farm">
                                            ‚ùå
                                        </button>
                                    }
                                </div>
                                @if (isCreatingCustomFarm)
                                {
                                    <div class="text-secondary">Creating a custom farm type with your own production rate</div>
                                }
                                else if (!string.IsNullOrEmpty(selectedFarm) && farmTypes.ContainsKey(selectedFarm))
                                {
                                    <div class="text-secondary">@farmTypes[selectedFarm].Description</div>
                                }
                            </div>
                            <div class="form-group">
                                <label class="form-label">Target Items</label>
                                <input type="number" @bind="targetQuantity" @bind:event="oninput" @onchange="OnTargetQuantityChanged" min="1" max="1000000" 
                                       placeholder="Enter target quantity (e.g., 1000)" 
                                       class="form-input" />
                            </div>
                            <div class="form-group" style="margin-top: 2rem;">
                                <label class="form-label">Production Rate</label>
                                <input type="number" @bind="dropsPer5Minutes" min="1" max="10000" 
                                       placeholder="Items produced per 5 minutes" 
                                       disabled="@(!isCustomFarm && !isCreatingCustomFarm)"
                                       class="form-input" />
                            </div>
                            @if (isCustomFarm || isCreatingCustomFarm)
                            {
                                <div class="form-group" style="margin-top: 1rem;">
                                    <label class="form-label">Time Frame (minutes)</label>
                                    <input type="number" @bind="customTimeFrameMinutes" min="1" max="60" 
                                           placeholder="Time frame in minutes (e.g., 5)" 
                                           class="form-input" />
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <div style="display: flex; gap: 0.5rem; align-items: center;">
                                @if (isCreatingCustomFarm)
                                {
                                    <button @onclick="SaveCustomFarmWithSound" class="button button-primary" style="flex: 1;">
                                        Save Custom Farm
                                    </button>
                                }
                                else
                                {
                                    <button @onclick="CalculateAfkTimeWithSound" class="button button-primary" disabled="@isCalculating" style="flex: 1;">
                                        @if (isCalculating)
                                        {
                                            <span>‚öôÔ∏è Calculating...</span>
                                        }
                                        else
                                        {
                                            <span>Calculate Now</span>
                                        }
                                    </button>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div style="color: #FF6B6B; background: rgba(255, 107, 107, 0.1); padding: 0.75rem; border-radius: 4px; margin-top: 1rem; text-align: left; border-left: 3px solid #FF6B6B;">
                                    ‚ùå @errorMessage
                                </div>
                            }
                            @if (showResult)
                            {
                                <div style="margin-top: 1.5rem; padding: 1rem; background: rgba(255,255,255,0.05); border-radius: 4px;">
                                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem; text-align: left;">
                                        <div>
                                            <strong style="color: white;">üè≠ Farm Type:</strong><br>
                                            <span style="color: white;">@selectedFarm</span>
                                        </div>
                                        <div>
                                            <strong style="color: white;">üì¶ Target:</strong><br>
                                            <span style="color: white;">@targetQuantity.ToString("N0") items</span>
                                        </div>
                                        <div>
                                            <strong style="color: white;">‚≠ê Efficiency Rating:</strong><br>
                                            <span style="color: white;">@GetEfficiencyRating()</span>
                                        </div>
                                        <div>
                                            <strong style="color: white;">‚è±Ô∏è Total Time:</strong><br>
                                            <span style="color: white;">@hours h @minutes m</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    @if (!showResult)
                    {
                        <div class="card" style="margin-bottom: 2rem;">
                            <div class="card-body text-center">
                                <div style="margin-bottom: 2rem; margin-top: 1rem;">
                                    <img src="Diamond_Pickaxe_JE3_BE3.webp" alt="Diamond Pickaxe" style="width: 118px; height: 118px; image-rendering: pixelated;" />
                                </div>
                                <h3>Welcome to MC AFK Tracker</h3>
                                <p style="margin-top: 1.5rem; margin-bottom: 2rem;">Configure your farm settings on the left, then click "Calculate AFK Time" to get started with your farming session planning.</p>
                            </div>
                            <div class="card-footer">
                                <div style="text-align: center; color: var(--text-muted); font-size: 0.9rem;">
                                    Ready to optimize your AFK farming sessions!
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="card" style="margin-bottom: 2rem; min-height: 400px;">
                            <div class="card-header">
                                <h2><img src="mcclock.png" alt="Timer" style="width: 40px; height: 40px; vertical-align: middle; margin-right: 12px;" /> AFK Timer & Progress</h2>
                            </div>
                            <div class="card-body text-center">
                                <div class="result-display">
                                    @if (timerCompleted)
                                    {
                                        <div class="result-label">Timer Complete!</div>
                                        <div style="margin: 1.5rem 0;">
                                            <img src="loading.webp" alt="Timer Complete" style="width: 120px; height: 120px; image-rendering: pixelated;" />
                                        </div>
                                        <div class="result-label" style="font-size: 0.9rem; margin-top: 0.5rem; color: #4CAF50;">
                                            üéâ AFK Session Complete! Your items are ready!
                                        </div>
                                    }
                                    else if (!timerRunning && !timerPaused)
                                    {
                                        <div class="result-label">Ready to Start</div>
                                        <div class="result-value timer-display" style="color: white; margin: 1.5rem 0;">@FormatTime(hours * 3600 + minutes * 60)</div>
                                        <div class="result-label" style="font-size: 0.9rem; margin-top: 0.5rem;">
                                            Total AFK Time: @hours h @minutes m
                                        </div>
                                    }
                                    else if (timerRunning)
                                    {
                                        <div class="result-label">Time Remaining</div>
                                        <div class="result-value timer-display pulse" style="color: white; margin: 1.5rem 0;">@FormatTime(timeRemaining)</div>
                                        <div class="result-label" style="font-size: 0.9rem; margin-top: 0.5rem;">
                                            Running - @Math.Round(((double)(totalTime - timeRemaining) / totalTime) * 100, 1)% Complete
                                        </div>
                                    }
                                    else if (timerPaused)
                                    {
                                        <div class="result-label">Timer Paused</div>
                                        <div class="result-value timer-display" style="color: white; margin: 1.5rem 0;">@FormatTime(timeRemaining)</div>
                                        <div class="result-label" style="font-size: 0.9rem; margin-top: 0.5rem;">
                                            Paused at @Math.Round(((double)(totalTime - timeRemaining) / totalTime) * 100, 1)%
                                        </div>
                                    }
                                </div>
                                <div class="button-group">
                                    @if (timerCompleted)
                                    {
                                        <button @onclick="ResetTimerWithSound" class="button button-primary">üîÑ Reset Timer</button>
                                    }
                                    else if (!timerRunning && !timerPaused)
                                    {
                                        <button @onclick="StartTimerWithSound" class="button button-primary">‚ñ∂ Start Timer</button>
                                    }
                                    else if (timerRunning)
                                    {
                                        <button @onclick="PauseTimerWithSound" class="button button-secondary">‚ùö‚ùö Pause</button>
                                        <button @onclick="StopTimerWithSound" class="button button-tertiary">‚óº Stop</button>
                                    }
                                    else if (timerPaused)
                                    {
                                        <button @onclick="ResumeTimerWithSound" class="button button-primary">‚ñ∂ Resume</button>
                                        <button @onclick="StopTimerWithSound" class="button button-tertiary">‚óº Stop</button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private class FarmJsonModel
    {
        public string Name { get; set; } = string.Empty;
        public int Rate { get; set; }
        public string Icon { get; set; } = string.Empty;
    }

    private List<FarmJsonModel> defaultFarms = new();

    private Dictionary<string, FarmInfo> farmTypes = new();
    
    private class FarmInfo
    {
        public int Rate { get; set; }
        public string Icon { get; set; } = "";
        public string Color { get; set; } = "";
        public string Description { get; set; } = "";
        public int TargetQuantity { get; set; } = 0;
        public int TimeFrameMinutes { get; set; } = 5;
    }
    
    private class AppState
    {
        public string SelectedFarm { get; set; } = "";
        public int TargetQuantity { get; set; } = 0;
        public int DropsPer5Minutes { get; set; } = 0;
        public bool ShowResult { get; set; } = false;
        public bool IsCustomFarm { get; set; } = false;
        public int DropsPerHour { get; set; } = 0;
        public int Hours { get; set; } = 0;
        public int Minutes { get; set; } = 0;
        public bool TimerRunning { get; set; } = false;
        public bool TimerPaused { get; set; } = false;
        public bool TimerCompleted { get; set; } = false;
        public int TimeRemaining { get; set; } = 0;
        public int TotalTime { get; set; } = 0;
        public DateTime? TimerStartTime { get; set; }
        public DateTime? TimerPausedTime { get; set; }
    }
    
    private string selectedFarm = "";
    private int targetQuantity = 0;
    private int dropsPer5Minutes = 0;
    private string errorMessage = string.Empty;
    private bool showResult = false;
    private bool isCustomFarm = false;
    private bool isCreatingCustomFarm = false;
    private string customFarmName = "";
    private bool isCalculating = false;
    private int dropsPerHour = 0;
    private int hours = 0;
    private int minutes = 0;
    private bool timerRunning = false;
    private bool timerPaused = false;
    private bool timerCompleted = false;
    private int timeRemaining = 0;
    private int totalTime = 0;
    private Timer? countdownTimer;
    private bool isDarkMode = false;
    private int customTimeFrameMinutes = 0;
    private string SelectedFarm
    {
        get => selectedFarm;
        set
        {
            selectedFarm = value;
            OnFarmTypeChanged();
        }
    }

    private async Task OnFarmSelectionChange(ChangeEventArgs e)
    {
        await PlayButtonSound();
        selectedFarm = e.Value?.ToString() ?? "";
        OnFarmTypeChanged();
        await SaveAppState();
    }

    private void OnFarmTypeChanged()
    {
        errorMessage = string.Empty;
        if (string.IsNullOrEmpty(selectedFarm))
        {
            targetQuantity = 0;
            dropsPer5Minutes = 0;
            isCustomFarm = false;
            showResult = false;
            customFarmName = "";
            customTimeFrameMinutes = 0;
            return;
        }
        if (selectedFarm == "Custom")
        {
            targetQuantity = 0;
            dropsPer5Minutes = 0;
            isCustomFarm = true;
            showResult = false;
            customFarmName = "";
            customTimeFrameMinutes = 0;
            return;
        }
        else if (farmTypes.ContainsKey(selectedFarm))
        {
            var farmInfo = farmTypes[selectedFarm];
            if (farmInfo.Color == "custom")
            {
                targetQuantity = farmInfo.TargetQuantity;
                customTimeFrameMinutes = farmInfo.TimeFrameMinutes;
                customFarmName = selectedFarm;
            }
            else
            {
                targetQuantity = 0;
                customTimeFrameMinutes = 5;
                customFarmName = "";
                dropsPer5Minutes = 0;
            }
            dropsPer5Minutes = farmInfo.Rate;
            isCustomFarm = farmInfo.Color == "custom";
            showResult = false;
            dropsPerHour = isCustomFarm ? (int)(dropsPer5Minutes * (60.0 / customTimeFrameMinutes)) : dropsPer5Minutes * 12;
        }
    }

    private async Task CalculateAfkTimeWithSound()
    {
        _ = PlayButtonSound();
        await CalculateAfkTime();
    }
    
    private async Task StartTimerWithSound()
    {
        await PlayButtonSound();
        StartTimer();
    }
    
    private async Task PauseTimerWithSound()
    {
        await PlayButtonSound();
        PauseTimer();
    }
    
    private async Task ResumeTimerWithSound()
    {
        await PlayButtonSound();
        ResumeTimer();
    }
    
    private async Task StopTimerWithSound()
    {
        await PlayButtonSound();
        StopTimer();
    }
    
    private async Task ResetTimerWithSound()
    {
        await PlayButtonSound();
        await StopCompletionSound();
        ResetTimer();
    }
    
    private async Task CalculateAfkTime()
    {
        errorMessage = string.Empty;
        showResult = false;
        isCalculating = true;
        await Task.Delay(500);
        if (string.IsNullOrEmpty(selectedFarm))
        {
            errorMessage = "Please select a farm type.";
            isCalculating = false;
            return;
        }
        if (targetQuantity <= 0)
        {
            errorMessage = "Please enter a valid number of items you want.";
            isCalculating = false;
            return;
        }
        if (dropsPer5Minutes <= 0)
        {
            errorMessage = "Please enter a valid number of drops per 5 minutes.";
            isCalculating = false;
            return;
        }
        if (isCustomFarm || isCreatingCustomFarm)
        {
            if (customTimeFrameMinutes <= 0)
            {
                errorMessage = "Please enter a valid time frame in minutes.";
                isCalculating = false;
                return;
            }
            dropsPerHour = (int)(dropsPer5Minutes * (60.0 / customTimeFrameMinutes));
        }
        else
        {
            dropsPerHour = dropsPer5Minutes * 12;
        }
        double totalMinutes = (double)targetQuantity / dropsPerHour * 60;
        totalMinutes = Math.Ceiling(totalMinutes);
        hours = (int)(totalMinutes / 60);
        minutes = (int)(totalMinutes % 60);
        isCalculating = false;
        showResult = true;
        await SaveAppState();
    }
    
    private string GetFarmThemeClass()
    {
        return "";
    }
    
    private string GetEfficiencyRating()
    {
        if (dropsPerHour == 0) return "N/A";
        
        return dropsPerHour switch
        {
            >= 2000 => "‚≠ê‚≠ê‚≠ê Excellent",
            >= 1500 => "‚≠ê‚≠ê Good",
            >= 1000 => "‚≠ê Average",
            _ => "‚ö†Ô∏è Poor"
        };
    }
    
    private string GetEfficiencyIcon()
    {
        return dropsPerHour switch
        {
            >= 2000 => "https://minecraft.wiki/images/f/fd/Emerald_JE3_BE3.png",
            >= 1500 => "https://minecraft.wiki/images/5/5e/Gold_Ingot_JE4_BE2.png",
            >= 1000 => "https://minecraft.wiki/images/7/7e/Iron_Ingot_JE3_BE2.png",
            _ => "https://minecraft.wiki/images/8/8c/Redstone_Dust_JE2_BE2.png"
        };
    }
    
    private string GetEfficiencyClass()
    {
        return "";
    }
    
    private async void StartTimer()
    {
        if (timerRunning || timerPaused) return;
        
        timeRemaining = hours * 3600 + minutes * 60;
        totalTime = timeRemaining;
        timerRunning = true;
        timerPaused = false;
        timerCompleted = false;
        
        countdownTimer = new Timer(UpdateTimer, null, 0, 1000);
        
        await SaveAppState();
    }
    
    private async void PauseTimer()
    {
        if (!timerRunning) return;
        
        timerRunning = false;
        timerPaused = true;
        countdownTimer?.Dispose();
        countdownTimer = null;
        
        await SaveAppState();
    }
    
    private async void ResumeTimer()
    {
        if (!timerPaused) return;
        
        timerPaused = false;
        timerRunning = true;
        
        countdownTimer = new Timer(UpdateTimer, null, 0, 1000);
        
        await SaveAppState();
    }
    
    private async void StopTimer()
    {
        timerRunning = false;
        timerPaused = false;
        timerCompleted = false;
        countdownTimer?.Dispose();
        countdownTimer = null;
        timeRemaining = totalTime;
        
        await SaveAppState();
    }
    
    private async void ResetTimer()
    {
        timerRunning = false;
        timerPaused = false;
        timerCompleted = false;
        countdownTimer?.Dispose();
        countdownTimer = null;
        timeRemaining = totalTime;
        
        await SaveAppState();
    }
    
    private async void UpdateTimer(object? state)
    {
        if (timeRemaining > 0)
        {
            timeRemaining--;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            timerRunning = false;
            timerCompleted = true;
            countdownTimer?.Dispose();
            countdownTimer = null;
            
            await InvokeAsync(async () =>
            {
                await PlayCompletionSound();
                await SaveAppState();
                StateHasChanged();
            });
        }
    }
    
    private string FormatTime(int totalSeconds)
    {
        var h = totalSeconds / 3600;
        var m = (totalSeconds % 3600) / 60;
        var s = totalSeconds % 60;
        return $"{h:D2}:{m:D2}:{s:D2}";
    }
    
    private async Task ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        
        if (isDarkMode)
        {
            await JSRuntime.InvokeVoidAsync("document.body.classList.add", "dark-mode");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("document.body.classList.remove", "dark-mode");
        }
    }
    
    private async Task PlayButtonSound()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("playButtonSound");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Audio playback failed: {ex.Message}");
        }
    }
    
    private async Task PlayCompletionSound()
    {
        try
        {
            Console.WriteLine("Attempting to play completion sound...");
            await JSRuntime.InvokeVoidAsync("playCompletionSound");
            Console.WriteLine("Completion sound method called successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Completion audio playback failed: {ex.Message}");
        }
    }
    
    private async Task StopCompletionSound()
    {
        try
        {
            Console.WriteLine("Attempting to stop completion sound...");
            await JSRuntime.InvokeVoidAsync("stopCompletionSound");
            Console.WriteLine("Completion sound stopped successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Completion audio stop failed: {ex.Message}");
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        var farms = await Http.GetFromJsonAsync<List<FarmJsonModel>>("sample-data/farms.json");
        if (farms != null)
        {
            defaultFarms = farms;
            foreach (var farm in defaultFarms)
            {
                farmTypes[farm.Name] = new FarmInfo
                {
                    Rate = farm.Rate,
                    Icon = farm.Icon,
                    Color = farm.Name.ToLower().Contains("farm") ? farm.Name.ToLower().Split(' ')[0] : "default",
                    Description = $"{farm.Name} ({farm.Rate} items/5min)",
                    TargetQuantity = 0,
                    TimeFrameMinutes = 5
                };
            }
        }
        await base.OnInitializedAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (isDarkMode)
            {
                await JSRuntime.InvokeVoidAsync("document.body.classList.add", "dark-mode");
            }
            
            await LoadCustomFarms();
            await LoadAppState();
        }
    }
    
    public void Dispose()
    {
        countdownTimer?.Dispose();
    }

    private async Task AddCustomFarmWithSound()
    {
        await PlayButtonSound();
        isCreatingCustomFarm = true;
        customFarmName = "";
        dropsPer5Minutes = 0;
        customTimeFrameMinutes = 0;
        targetQuantity = 0;
        showResult = false;
        errorMessage = string.Empty;
    }
    
    private async Task CancelCustomFarmWithSound()
    {
        await PlayButtonSound();
        isCreatingCustomFarm = false;
        customFarmName = "";
        dropsPer5Minutes = 0;
        customTimeFrameMinutes = 0;
        targetQuantity = 0;
        selectedFarm = "";
        isCustomFarm = false;
        showResult = false;
        errorMessage = string.Empty;
    }
    
    private async Task SaveCustomFarmWithSound()
    {
        await PlayButtonSound();
        errorMessage = string.Empty;
        if (string.IsNullOrEmpty(customFarmName) || dropsPer5Minutes <= 0 || customTimeFrameMinutes <= 0)
        {
            if (string.IsNullOrEmpty(customFarmName))
                errorMessage = "Please enter a farm name.";
            else if (dropsPer5Minutes <= 0)
                errorMessage = "Please enter a valid production rate.";
            else if (customTimeFrameMinutes <= 0)
                errorMessage = "Please enter a valid time frame in minutes.";
            return;
        }
        farmTypes[customFarmName] = new FarmInfo
        {
            Rate = dropsPer5Minutes,
            Icon = "üîß",
            Color = "custom",
            Description = $"Custom farm: {customFarmName} - {dropsPer5Minutes} items per {customTimeFrameMinutes} minutes",
            TargetQuantity = targetQuantity,
            TimeFrameMinutes = customTimeFrameMinutes
        };
        isCreatingCustomFarm = false;
        selectedFarm = customFarmName;
        isCustomFarm = true;
        showResult = false;
        errorMessage = string.Empty;
        await SaveAppState();
    }
    
    private async Task DeleteCustomFarmWithSound()
    {
        await PlayButtonSound();
        DeleteCustomFarm();
        await SaveCustomFarms();
    }
    
    private void DeleteCustomFarm()
    {
        if (string.IsNullOrEmpty(selectedFarm) || !farmTypes.ContainsKey(selectedFarm))
        {
            return;
        }
        
        if (farmTypes[selectedFarm].Color != "custom")
        {
            return;
        }
        
        farmTypes.Remove(selectedFarm);
        
        selectedFarm = "Iron Farm";
        isCustomFarm = false;
        
        if (farmTypes.ContainsKey("Iron Farm"))
        {
            dropsPerHour = farmTypes["Iron Farm"].Rate * 12;
            dropsPer5Minutes = farmTypes["Iron Farm"].Rate;
            targetQuantity = 1000;
        }
        
        errorMessage = string.Empty;
    }
    
    private async Task SaveCustomFarms()
    {
        try
        {
            var customFarms = farmTypes.Where(f => f.Value.Color == "custom").ToDictionary(f => f.Key, f => f.Value);
            
            var json = System.Text.Json.JsonSerializer.Serialize(customFarms);
            
            await JSRuntime.InvokeVoidAsync("saveCustomFarms", json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to save custom farms: {ex.Message}");
        }
    }
    
    private async Task SaveAppState()
    {
        try
        {
            var appState = new AppState
            {
                SelectedFarm = selectedFarm,
                TargetQuantity = targetQuantity,
                DropsPer5Minutes = dropsPer5Minutes,
                ShowResult = showResult,
                IsCustomFarm = isCustomFarm,
                DropsPerHour = dropsPerHour,
                Hours = hours,
                Minutes = minutes,
                TimerRunning = timerRunning,
                TimerPaused = timerPaused,
                TimerCompleted = timerCompleted,
                TimeRemaining = timeRemaining,
                TotalTime = totalTime,
                TimerStartTime = timerRunning ? DateTime.Now.AddSeconds(-((double)totalTime - timeRemaining)) : null,
                TimerPausedTime = timerPaused ? DateTime.Now : null
            };
            
            var json = System.Text.Json.JsonSerializer.Serialize(appState);
            await JSRuntime.InvokeVoidAsync("saveAppState", json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to save app state: {ex.Message}");
        }
    }
    
    private async Task LoadCustomFarms()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("loadCustomFarms");
            
            if (!string.IsNullOrEmpty(json))
            {
                var customFarms = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, FarmInfo>>(json);
                
                if (customFarms != null)
                {
                    foreach (var farm in customFarms)
                    {
                        farmTypes[farm.Key] = farm.Value;
                    }
                    
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load custom farms: {ex.Message}");
        }
    }
    
    private async Task LoadAppState()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("loadAppState");
            
            if (!string.IsNullOrEmpty(json))
            {
                var appState = System.Text.Json.JsonSerializer.Deserialize<AppState>(json);
                
                if (appState != null)
                {
                    selectedFarm = appState.SelectedFarm;
                    targetQuantity = appState.TargetQuantity;
                    dropsPer5Minutes = appState.DropsPer5Minutes;
                    showResult = appState.ShowResult;
                    isCustomFarm = appState.IsCustomFarm;
                    dropsPerHour = appState.DropsPerHour;
                    hours = appState.Hours;
                    minutes = appState.Minutes;
                    
                    timerCompleted = appState.TimerCompleted;
                    totalTime = appState.TotalTime;
                    
                    if (appState.TimerRunning && appState.TimerStartTime.HasValue)
                    {
                        var elapsed = DateTime.Now - appState.TimerStartTime.Value;
                        var elapsedSeconds = (int)elapsed.TotalSeconds;
                        
                        if (elapsedSeconds < totalTime)
                        {
                            timeRemaining = totalTime - elapsedSeconds;
                            timerRunning = true;
                            timerPaused = false;
                            
                            countdownTimer = new Timer(UpdateTimer, null, 0, 1000);
                        }
                        else
                        {
                            timeRemaining = 0;
                            timerRunning = false;
                            timerPaused = false;
                            timerCompleted = true;
                        }
                    }
                    else if (appState.TimerPaused)
                    {
                        timeRemaining = appState.TimeRemaining;
                        timerRunning = false;
                        timerPaused = true;
                        timerCompleted = false;
                    }
                    else
                    {
                        timeRemaining = appState.TimeRemaining;
                        timerRunning = false;
                        timerPaused = false;
                    }
                    
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load app state: {ex.Message}");
        }
    }
    
    private async Task ClearAllCustomFarms()
    {
        try
        {
            var customFarmKeys = farmTypes.Where(f => f.Value.Color == "custom").Select(f => f.Key).ToList();
            foreach (var key in customFarmKeys)
            {
                farmTypes.Remove(key);
            }
            
            await JSRuntime.InvokeVoidAsync("clearCustomFarms");
            
            selectedFarm = "";
            isCustomFarm = false;
            targetQuantity = 0;
            dropsPer5Minutes = 0;
            showResult = false;
            errorMessage = string.Empty;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to clear custom farms: {ex.Message}");
        }
    }
    
    private async Task OnTargetQuantityChanged()
    {
        if (isCustomFarm && !string.IsNullOrEmpty(selectedFarm) && farmTypes.ContainsKey(selectedFarm))
        {
            farmTypes[selectedFarm].TargetQuantity = targetQuantity;
            await SaveCustomFarms();
        }
        
        await SaveAppState();
    }
}
